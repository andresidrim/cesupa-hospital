// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://cesupa-hospital/terms/",
        "contact": {
            "name": "Equipe de Desenvolvimento",
            "url": "http://cesupa-hospital/support",
            "email": "suporte@cesupa-hospital.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/doctors": {
            "get": {
                "description": "Retorna todos os usuários cujo papel é 'doctor'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usuários"
                ],
                "summary": "Lista médicos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "404": {
                        "description": "No doctors found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Recebe cpf e senha e devolve um token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Faz login e retorna JWT",
                "parameters": [
                    {
                        "description": "Dados para login",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pacients": {
            "get": {
                "description": "Retorna todos os pacientes, podendo filtrar por nome e/ou idade",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Lista pacientes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filtra pelo nome (substring)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filtra pela idade exata",
                        "name": "age",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pacient"
                            }
                        }
                    },
                    "404": {
                        "description": "No pacient was found",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Registra um paciente com dados obrigatórios e opcionais",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Cadastra um novo paciente",
                "parameters": [
                    {
                        "description": "Dados do paciente",
                        "name": "paciente",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pacients.AddPacientDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Pacient"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create pacient",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pacients/{id}": {
            "get": {
                "description": "Retorna os dados de um paciente pelo seu ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Busca paciente",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do paciente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pacient"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pacient not found",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Atualiza campos de um paciente existente (PATCH semantics)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Atualiza paciente",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do paciente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados que serão atualizados",
                        "name": "paciente",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pacients.UpdatePacientDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pacient"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Input",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pacient not found",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update pacient",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Inativa (ou exclui) um paciente pelo ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Exclui paciente",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do paciente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pacient"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pacient not found",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete pacient",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pacients/{id}/appointments": {
            "post": {
                "description": "Cria uma nova consulta para o paciente informado",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pacientes"
                ],
                "summary": "Agenda consulta",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do paciente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados da consulta",
                        "name": "appointment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pacients.ScheduleAppointmentDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or Input",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Pacient not found",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create appointment",
                        "schema": {
                            "$ref": "#/definitions/pacients.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Recebe name, cpf, password e role e cria o usuário",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Cadastra um novo usuário",
                "parameters": [
                    {
                        "description": "Dados para registro",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retorna todos os usuários, podendo filtrar por um ou mais papéis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usuários"
                ],
                "summary": "Lista usuários",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filtro de papéis separados por vírgula",
                        "name": "roles",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "404": {
                        "description": "No users were found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retorna dados de um usuário pelo seu ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usuários"
                ],
                "summary": "Busca usuário",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do usuário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginDTO": {
            "type": "object",
            "required": [
                "cpf",
                "password"
            ],
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterDTO": {
            "type": "object",
            "required": [
                "cpf",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "$ref": "#/definitions/enums.Role"
                }
            }
        },
        "enums.BloodType": {
            "type": "string",
            "enum": [
                "A+",
                "A-",
                "B+",
                "B-",
                "AB+",
                "AB-",
                "O+",
                "O-"
            ],
            "x-enum-varnames": [
                "APositive",
                "ANegative",
                "BPositive",
                "BNegative",
                "ABPositive",
                "ABNegative",
                "OPositive",
                "ONegative"
            ]
        },
        "enums.Role": {
            "type": "string",
            "enum": [
                "recepcionist",
                "doctor",
                "admin"
            ],
            "x-enum-varnames": [
                "Receptionist",
                "Doctor",
                "Admin"
            ]
        },
        "enums.Sex": {
            "type": "string",
            "enum": [
                "male",
                "famale"
            ],
            "x-enum-varnames": [
                "Male",
                "Female"
            ]
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterResponse": {
            "type": "object",
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/enums.Role"
                }
            }
        },
        "handlers.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.Appointment": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "pacientId": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.Pacient": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "allergies": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "bloodType": {
                    "$ref": "#/definitions/enums.BloodType"
                },
                "cpf": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/enums.Sex"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "appointments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Appointment"
                    }
                },
                "cpf": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/enums.Role"
                }
            }
        },
        "pacients.AddPacientDTO": {
            "type": "object",
            "required": [
                "address",
                "birthDate",
                "cpf",
                "name",
                "phoneNumber",
                "sex"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "allergies": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "bloodType": {
                    "$ref": "#/definitions/enums.BloodType"
                },
                "cpf": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/enums.Sex"
                }
            }
        },
        "pacients.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "pacients.ScheduleAppointmentDTO": {
            "type": "object",
            "required": [
                "date",
                "doctorId"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "doctorId": {
                    "type": "integer"
                }
            }
        },
        "pacients.UpdatePacientDTO": {
            "type": "object",
            "required": [
                "address",
                "birthDate",
                "cpf",
                "name",
                "phoneNumber",
                "sex"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "allergies": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "bloodType": {
                    "$ref": "#/definitions/enums.BloodType"
                },
                "cpf": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/enums.Sex"
                }
            }
        },
        "users.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "CESUPA Hospital API",
	Description:      "API para gerenciar pacientes, consultas e usuários do Hospital CESUPA.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
